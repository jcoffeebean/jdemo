<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">  
  	<display-name></display-name>	
   	<!-- 配置一个参数driver -->
	<context-param>
		<param-name>driver</param-name>
		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
	</context-param>

	<context-param>
		<param-name>url</param-name>
		<param-value>jdbc:oracle:thin:@HAWK:1521:orcl</param-value>
	</context-param>
			
	<context-param>
		<param-name>user</param-name>
		<param-value>emcd</param-value>
	</context-param>
	<context-param>
		<param-name>pwd</param-name>
		<param-value>emcd</param-value>
	</context-param>

	<!-- 设置Spring容器加载配置文件路径 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
	</context-param>	
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.xml</param-value>
	</context-param>
    
	<!-- 上下文Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 使用spring中的Log4jConfigListener动态的改变记录级别和策略，不需要重启Web应用  --> 
	<listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    
    <!-- 激活Tomcat的defaultServlet来处理静态文件
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping> 
     -->
    <!-- 配置Spring核心控制器 -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 配置文件 ，不指定的话就默认为/WEB-INF/servletName-servlet.xml，此处默认即为：/WEB-INF/dispatcher-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:context-dispatcher.xml</param-value>
        </init-param>        
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--为了实现REST风格，/拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了-->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    <!-- 配置一个Servlet -->	
    <servlet>
    	<servlet-name>getApp</servlet-name>
    	<servlet-class>tydic.action.GetAppServlet</servlet-class>
    </servlet>
    <servlet-mapping>
    	<servlet-name>getApp</servlet-name>
    	<url-pattern>/getcounter</url-pattern>
    </servlet-mapping>
    
    <!-- 登陆 -->
    <servlet>
    	<servlet-name>login</servlet-name>
    	<servlet-class>tydic.action.LoginServlet</servlet-class>
    	
    </servlet>
    <servlet-mapping>
    	<servlet-name>login</servlet-name>
    	<url-pattern>/login</url-pattern>
    </servlet-mapping>
    
    <!-- 作为后台服务随Web启动的Servlet 应用启动时，创建Servlet
    <servlet>
    	<servlet-name>timer</servlet-name>
    	<servlet-class>tydic.action.TimerServlet</servlet-class>
    	<load-on-startup>1</load-on-startup>
    </servlet>
	-->	
	
	<servlet>
    	<servlet-name>testServlet</servlet-name>
    	<servlet-class>tydic.action.TestServlet</servlet-class>
    	<!-- 配置参数 -->
			<init-param>
				<param-name>driver</param-name>
				<param-value>oracle.jdbc.driver.OracleDriver</param-value>
			</init-param>			
			<init-param>
				<param-name>url</param-name>
				<param-value>jdbc:oracle:thin:@192.168.0.104:1521:oradb</param-value>
			</init-param>
			<init-param>
				<param-name>username</param-name>
				<param-value>pzk</param-value>
			</init-param>
			<init-param>
				<param-name>pwd</param-name>
				<param-value>pzk</param-value>
			</init-param>
    </servlet>
    <servlet-mapping>
    	<servlet-name>testServlet</servlet-name>
    	<url-pattern>/testServlet</url-pattern>
    </servlet-mapping>
    
    <!-- 定义Filter -->
    <filter>
    	<!-- Filter的名字 -->
    	<filter-name>log</filter-name>
    	<!-- Filter的实现类 -->
    	<filter-class>tydic.filter.LogFilter</filter-class>    	
    </filter>
    <!-- 定义Filter拦截的URL地址，/*拦截所有请求-->
    <filter-mapping>
    	<filter-name>log</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>    
    
    <!-- 定义Filter 
    <filter>
    	<filter-name>authority</filter-name>
    	<filter-class>tydic.filter.AuthorityFilter</filter-class>  
    	<init-param>
    		<param-name>encoding</param-name>
    		<param-value>UTF-8</param-value>
    	</init-param> 
    	<init-param>
    		<param-name>loginPage</param-name>
    		<param-value>/login.jsp</param-value>
    	</init-param>	
    </filter>
    <filter-mapping>
    	<filter-name>authority</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter>
    	<filter-name>log2</filter-name>
    	<filter-class>tydic.filter.LogFilter2</filter-class>    	
    </filter>
    <filter-mapping>
    	<filter-name>log2</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping> 
    -->
    
    <!-- 配置监听器 -->
    <!--listener-->
    	<!-- 指定监听器的实现类 -->
    	<!--listener-class>tydic.listener.GetConnectionListener</listener-class-->
    <!--/listener-->
    
    <!-- 定义标签库 -->
    <jsp-config>
	    <taglib>
	    	<!-- 确定标签库的URI -->
	    	<taglib-uri>/tags/test.tld</taglib-uri>
	    	<!-- 确定标签库定义文件的位置 -->
	    	<taglib-location>/WEB-INF/tlds/test.tld</taglib-location>
	    </taglib>
	    <taglib>
	    	<taglib-uri>/test.tld</taglib-uri>
	    	<taglib-location>/WEB-INF/tlds/test.tld</taglib-location>
    	</taglib>
	    <taglib>
	    	<taglib-uri>/taowei/mytaglib</taglib-uri>
	    	<taglib-location>/WEB-INF/tlds/mytaglib.tld</taglib-location>
	    </taglib>
    </jsp-config>
</web-app>
